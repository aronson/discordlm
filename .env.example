# Discord Bot Configuration
BOT_TOKEN=your_discord_bot_token_here
BOT_SELF_ID=your_bot_user_id_here

# LLM Configuration
OPENAI_URL=https://api.openai.com/v1
OPENAI_KEY=your_openai_api_key_here
MODEL_NAME=gpt-4o-mini

# Optional: Token limit for context window
TOKEN_LIMIT=32600

# Avatar Server Configuration
ENABLE_AVATAR_SERVER=true
AVATAR_PORT=8080

# Public Avatar Base URL (IMPORTANT for Discord webhooks)
# This should be a publicly accessible HTTPS URL that proxies to your local avatar server
# Examples:
# - If using ngrok: https://abc123.ngrok.io
# - If using a reverse proxy: https://avatars.yourdomain.com
# - If using a CDN: https://your-cdn.com/avatars
PUBLIC_AVATAR_BASE_URL=https://avatars.yourdomain.com

# Setup Instructions for PUBLIC_AVATAR_BASE_URL:
#
# Option 1: ngrok (for development/testing)
# 1. Install ngrok: brew install ngrok (macOS) or download from https://ngrok.com
# 2. Run: ngrok http 8080
# 3. Copy the https URL (e.g., https://abc123.ngrok.io) to PUBLIC_AVATAR_BASE_URL
#
# Option 2: Reverse Proxy (for production)
# 1. Set up a reverse proxy (nginx, caddy, etc.) on your server with TLS
# 2. Configure it to proxy requests to localhost:8080
# 3. Set PUBLIC_AVATAR_BASE_URL to your domain (e.g., https://avatars.yourdomain.com)
#
# Option 3: CDN/Cloud Storage
# 1. Upload character avatars to a CDN or cloud storage service
# 2. Set PUBLIC_AVATAR_BASE_URL to the CDN URL
# 3. Use standard naming conventions (alice.png for alice.json character cards)
#
# NOTE: No character card editing required! The system automatically detects avatars:
# - For PNG character cards: Uses the PNG file itself as the avatar
# - For JSON character cards: Looks for matching PNG files (alice.json â†’ alice.png)
# - Only add avatarUrl to character JSON if using external URLs

